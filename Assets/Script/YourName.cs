using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;
using System.Globalization;

public class YourName : MonoBehaviour
{
    [System.Serializable]
    public class IntroStep
    {
        public Sprite backgroundImage;
        public string storyText;
        public bool isNameInputStep;
        public string buttonText;
    }

    public Image background;
    public TextMeshProUGUI storyText;
    public TMP_InputField nameInputField;
    public Button continueButton;
    public TextMeshProUGUI buttonLabel;
    public TextMeshProUGUI warningText;

    public List<IntroStep> introSteps;
    private int currentStep = 0;
    public string playerName;

    [Header("SFX Sounds")]
    public AudioClip signNameSound;

    private AudioManager audioManager;

    void Start()
{
    nameInputField.gameObject.SetActive(false);
    warningText.gameObject.SetActive(false);

    nameInputField.onValueChanged.AddListener(LimitNameLength);
    nameInputField.onValidateInput += ValidateCharacterInput; // üî• ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©

    ShowStep(currentStep);
    continueButton.onClick.AddListener(OnContinue);

    audioManager = FindObjectOfType<AudioManager>();
}

private char ValidateCharacterInput(string text, int charIndex, char addedChar)
{
    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£, ‡∏™‡∏£‡∏∞, ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡πÅ‡∏•‡∏∞‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÑ‡∏ó‡∏¢
    if (IsValidMainChar(addedChar) || IsThaiToneMark(addedChar))
    {
        return addedChar;
    }

    return '\0'; // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ô‡∏µ‡πâ
}

    void ShowStep(int step)
    {
        if (step < introSteps.Count)
        {
            background.sprite = introSteps[step].backgroundImage;
            storyText.text = introSteps[step].storyText;
            buttonLabel.text = introSteps[step].buttonText;

            nameInputField.text = "";
            nameInputField.gameObject.SetActive(introSteps[step].isNameInputStep);
        }
    }

   void LimitNameLength(string value)
{
    string result = "";
    int count = 0;

    // ‡πÉ‡∏ä‡πâ StringInfo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ grapheme clusters
    TextElementEnumerator charEnum = StringInfo.GetTextElementEnumerator(value);

    while (charEnum.MoveNext())
    {
        string grapheme = charEnum.GetTextElement();

        char mainChar = grapheme[0];

        if (IsValidMainChar(mainChar) || IsThaiToneMark(mainChar))
        {
            if (IsThaiToneMark(mainChar))
            {
                result += grapheme; // ‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö
            }
            else
            {
                if (count < 8)
                {
                    result += grapheme;
                    count++;
                }
                else
                {
                    break;
                }
            }
        }
    }

    nameInputField.text = result;
}

// ‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡πà ‡πâ ‡πä ‡πã ‡πå ‡∏Ø‡∏•‡∏Ø) ‚Äì ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö
bool IsThaiToneMark(char c)
{
    return (c >= '\u0E47' && c <= '\u0E4E') || c == '\u0E31'; // ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢ ‡∏™‡∏£‡∏∞‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö)
bool IsValidMainChar(char c)
{
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©/‡πÄ‡∏•‡∏Ç
    if (char.IsLetterOrDigit(c)) return true;

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢ (‡∏Å-‡∏Æ)
    if (c >= '\u0E01' && c <= '\u0E2E') return true;

    // ‡∏™‡∏£‡∏∞‡πÑ‡∏ó‡∏¢ (‡∏≤ ‡∏≥ ‡πÄ ‡πÅ ‡πÇ ‡πÉ ‡πÑ ‡∏Ø‡∏•‡∏Ø)
    if ((c >= '\u0E30' && c <= '\u0E3A') || (c >= '\u0E40' && c <= '\u0E44')) return true;

    // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏î‡πâ
    return false;
}

    IEnumerator ShowWarningForTime(string message, float duration)
    {
        warningText.text = message;
        warningText.gameObject.SetActive(true);
        yield return new WaitForSeconds(duration);
        warningText.gameObject.SetActive(false);
    }

    void OnContinue()
    {
        if (introSteps[currentStep].isNameInputStep)
        {
            string inputName = nameInputField.text.Trim();

            if (string.IsNullOrEmpty(inputName))
            {
                StartCoroutine(ShowWarningForTime("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!!", 2f));
                return;
            }

            if (ContainsProfanity(inputName))
            {
                StartCoroutine(ShowWarningForTime("‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°!!", 2f));
                return;
            }

            if (HasExcessiveRepeats(inputName))
            {
                StartCoroutine(ShowWarningForTime("‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏£‡∏∑‡∏≠\n‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ï‡∏±‡∏ß!!", 2f));
                return;
            }

            playerName = inputName;
        }

        currentStep++;
        if (currentStep < introSteps.Count)
        {
            ShowStep(currentStep);
        }
        else
        {
            audioManager.PlaySFX(signNameSound);
            EndIntro();
        }
    }

    bool HasExcessiveRepeats(string name)
{
    Dictionary<char, int> charCount = new Dictionary<char, int>();

    // Unicode range ‡∏Ç‡∏≠‡∏á‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (U+0E31, U+0E34 - U+0E3A, U+0E47 - U+0E4E)
    string filtered = "";
    foreach (char c in name)
    {
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏≠‡∏≠‡∏Å
        if (!(c >= '\u0E31' && c <= '\u0E4E'))
        {
            filtered += c;
        }
    }

    foreach (char c in filtered)
    {
        if (!charCount.ContainsKey(c))
            charCount[c] = 1;
        else
            charCount[c]++;

        if (charCount[c] > 4)
            return true;
    }

    return false;
}

    bool ContainsProfanity(string name)
{
    string[] badWords = {
        // English
        "fuck", "shit", "bitch", "asshole", "porn", "sex", "nude", "boob", "dick", "vagina", "penis", "cock", "cum", "tits",
        "slut", "whore", "pussy", "fag", "fucker", "nigga", "nigger", "sexy", "blowjob", "suck", "jerk", "orgasm", "cumming",
        "hentai", "milf", "xxx", "69", "rape", "thot", "bang", "ass", "moan", "titty", "titties",

        // Thai (‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
        "‡∏Ñ‡∏ß‡∏¢", "‡πÄ‡∏´‡∏µ‡πâ‡∏¢", "‡πÄ‡∏¢‡πá‡∏î", "‡∏´‡∏µ", "‡∏™‡∏±‡∏™", "‡∏™‡∏±‡∏î", "‡∏û‡πà‡∏≠‡∏°‡∏∂‡∏á", "‡πÅ‡∏°‡πà‡∏°‡∏∂‡∏á", "‡πÑ‡∏≠‡πâ‡πÄ‡∏´‡∏µ‡πâ‡∏¢", "‡∏ü‡∏±‡∏Ñ", "‡∏ã‡∏±‡πà‡∏°", "‡πÅ‡∏ï‡∏î", "‡∏Ç‡∏µ‡πâ", "‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢",
        "‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å", "‡∏à‡∏±‡∏ç‡πÑ‡∏£", "‡∏≠‡∏µ‡∏î‡∏≠‡∏Å", "‡∏°‡∏∂‡∏á", "‡∏Å‡∏π", "‡∏ä‡∏¥‡∏ö‡∏´‡∏≤‡∏¢", "‡∏î‡∏≠‡∏Å‡∏ó‡∏≠‡∏á", "‡∏•‡πà‡∏≠", "‡πÄ‡∏î‡πâ‡∏≤", "‡∏≠‡∏°", "‡πÄ‡∏™‡∏µ‡∏¢‡∏ß", "‡∏Ç‡πà‡∏°‡∏Ç‡∏∑‡∏ô", "‡∏ã‡∏¥‡∏á", "‡∏´‡∏°‡∏≠‡∏¢",
        "‡∏ï‡∏π‡∏î", "‡∏ï‡∏π‡∏î‡∏´‡∏°‡∏∂‡∏Å", "‡∏•‡πà‡∏≠‡πÅ‡∏°‡πà", "‡∏•‡πà‡∏≠‡∏û‡πà‡∏≠", "‡∏•‡πà‡∏≠‡πÄ‡∏°‡∏µ‡∏¢", "‡∏´‡∏≥", "‡πÄ‡∏¢‡∏î", "‡πÄ‡∏¢‡πâ‡∏î", "‡∏´‡∏µ‡∏¢‡πå", "‡∏´‡∏µ‡πã", "‡πÄ‡∏á‡∏µ‡πà‡∏¢‡∏ô", "‡∏Ñ‡∏ß‡∏≤‡∏¢", "‡∏•‡πà‡∏≠‡∏Å‡∏±‡∏ô",

        // Thai (‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥)
        "kuy", "kuay", "hee", "‡πÄ‡∏´‡πâ", "‡∏ü‡∏±‡∏Ñ‡∏¢‡∏π", "‡∏ü‡∏±‡∏Ñ‡∏Ñ", "‡∏ü‡∏±‡∏Å‡∏¢‡∏π", "fu*k", "fuq", "fuxk", "sh1t", "b1tch", "p0rn", "s3x", "‡πÄ‡∏ã‡πá‡∏Å‡∏™‡πå", "‡∏ã‡∏±‡πä‡∏°",

        // Thai (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏•‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏¢‡∏Å‡∏™‡∏£‡∏∞)
        "‡πÄ-‡∏´‡∏µ‡πâ‡∏¢", "‡∏Ñ-‡∏ß-‡∏¢", "‡∏´-‡∏µ", "‡πÄ-‡∏¢‡πá‡∏î", "‡πÅ-‡∏ï‡∏î", "‡∏û-‡πà‡∏≠‡∏°‡∏∂‡∏á", "‡πÅ-‡∏°‡πà‡∏°‡∏∂‡∏á"
    };

    string loweredName = name.ToLower();

    foreach (string word in badWords)
    {
        if (loweredName.Contains(word.Replace("-", "")))
        {
            return true;
        }
    }

    return false;
}

    void EndIntro()
    {
        Photon.Pun.PhotonNetwork.NickName = playerName;
        Invoke("LoadNextScene", 0.5f);
    }

    void LoadNextScene()
    {
        SceneManager.LoadScene("JoinGameScene");
    }
}
